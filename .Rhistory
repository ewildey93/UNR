pattern="gps",recursive = TRUE, full.names = TRUE)
?lapply()
myfiles <- myfiles[1:5]
listnames <- list.files(path = "C:/Users/eliwi/OneDrive/Documents/R/DeerISSFTWS/Data",pattern = ".csv",full.names = FALSE)
listnames <- gsub(listnames,pattern = ".csv", replacement = "")
Nodegps <- lapply(myfiles, function (x) read_csv(x), assign(listnames))
?assing
?assign
listnames <- list.files(path = "C:/Users/eliwi/OneDrive/Documents/R/DeerISSFTWS/Data",pattern = ".csv",full.names = FALSE)
listnames <- gsub(listnames,pattern = ".csv", replacement = "")
myfiles
lsitnames
listnames
listnames <- list.files(path = "C:/Users/eliwi/OneDrive/Documents/Supercomputer/node",pattern = "gps",recursive=T,full.names = FALSE)
listnames <- list.files(path = "C:/Users/eliwi/OneDrive/Documents/Supercomputer/nodes",pattern = "gps",recursive=T,full.names = FALSE)
listnames <- gsub(listnames,pattern = ".csv", replacement = "")
listnames <- listnames[1:5]
listnames <- list.files(path = "C:/Users/eliwi/OneDrive/Documents/Supercomputer/nodes",pattern = "gps",recursive=T,full.names = FALSE)
listnames <- gsub(listnames,pattern = "/gps.csv", replacement = "")
listnames <- listnames[1:5]
Nodegps <- lapply(myfiles, function (x) read_csv(x), assign(x,listnames))
Nodegps <- lapply(myfiles, function (x) assign(listnames,read_csv(x))
Nodegps <- lapply(myfiles, function (x) assign(listnames,read_csv(x)))
library(read_csv)
library(readr)
Nodegps <- lapply(myfiles, function (x) assign(listnames,read_csv(x)))
View(Nodegps)
for(i in 1:length(myfiles)) assign(listnames[i], read_csv(myfiles[i]))
list <- lapply(myfiles, function (x) read_csv(x))
View(list)
names(list) <- listnames
View(list)
View(list)
list[["3383CA"]][["Time"]]
View(`338FB0`)
View(Nodegps)
Nodegps <- lapply(Nodegps, function (x) Nodegps[Latitude > 38.489  & Latitude < 38.513 ])
Nodegps <- lapply(Nodegps, function (x) x[x$Latitude > 38.489  & x$Latitude < 38.513 ])
Nodegps <- lapply(Nodegps, function (x) x[x$Latitude > 38.489  & x$Latitude < 38.513, ])
View(Nodegps)
Nodegps <- lapply(Nodegps, function (x) x[x$Longitude > -106.036  & x$Longitude < -106.008,])
View(Nodegps)
Nodegps <- lapply(Nodegps, function (x) {attributes(x$Time)$tzone <- "America/Denver"
;x})
View(Nodegps)
Nodegps <- lapply(Nodegps, function (x) mutate(x,Date=as.Date(Time)))
library(dplyr)
Nodegps <- lapply(Nodegps, function (x) mutate(x,Date=as.Date(Time)))
View(Nodegps)
Nodegps <- lapply(Nodegps, function (x) round(x[,c('Latitude','Longitude')],4))
View(Nodegps)
?round
Nodegps <- lapply(myfiles, function (x) read_csv(x))
names(Nodegps) <- listnames
Nodegps <- lapply(Nodegps, function (x) x[x$Latitude > 38.489  & x$Latitude < 38.513, ])
Nodegps <- lapply(Nodegps, function (x) x[x$Longitude > -106.036  & x$Longitude < -106.008,])
Nodegps <- lapply(Nodegps, function (x) {attributes(x$Time)$tzone <- "America/Denver"
;x})
Nodegps <- lapply(Nodegps, function (x) mutate(x,Date=as.Date(Time)))
Nodegps <- lapply(Nodegps, function (x) round(x[,c('Latitude','Longitude')],4);x)
Nodegps <- lapply(Nodegps[,c('Latitude','Longitude')], function (x) round(x,4))
?rbindlist
library(data.table)
?rbindlist
NodeGPS <- rbindlist(l = Nodegps,use.names = TRUE,fill = TRUE, idcol=TRUE)
NodeGPS[,c('Latitude','Longitude')] <- round(NodeGPS[,c('Latitude','Longitude')],4)
?distinct
head(NodeGPS)
NodeGPS <- distinct(NodeGPS, .id, Latitude, Longitude, Date)
View(NodeGPS)
NodeGPS <- rbindlist(l = Nodegps,use.names = TRUE,fill = TRUE, idcol=TRUE)
NodeGPS[,c('Latitude','Longitude')] <- round(NodeGPS[,c('Latitude','Longitude')],4)
NodeGPS <- distinct(NodeGPS, .id, Latitude, Longitude, Date, .keep_all = TRUE)
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLat=abs(Latitude-lag(Latitude)))
hist(NodeGPS$difLat, na.rm=T)
range(NodeGPS$difLat)
range(NodeGPS$difLat, na.rm=T)
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLong=abs(Longitude-lag(Longitude)))
NodeGPS <- NodeGPS[NodeGPS$difLat > .0002 & NodeGPS$difLong > .0002]
NodeGPS <- NodeGPS[NodeGPS$difLat > .0002 & NodeGPS$difLong > .0002,]
NodeGPS <- rbindlist(l = Nodegps,use.names = TRUE,fill = TRUE, idcol=TRUE)
NodeGPS[,c('Latitude','Longitude')] <- round(NodeGPS[,c('Latitude','Longitude')],4)
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLat=abs(Latitude-lag(Latitude)))
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLong=abs(Longitude-lag(Longitude)))
NodeGPS <- NodeGPS[NodeGPS$difLat > .0002 | NodeGPS$difLat =NA & NodeGPS$difLong > .0002 |NodeGPS$difLong = NA,]
NodeGPS <- NodeGPS[NodeGPS$difLat > .0002 | NodeGPS$difLat == NA & NodeGPS$difLong > .0002 |NodeGPS$difLong == NA,]
NodeGPS <- rbindlist(l = Nodegps,use.names = TRUE,fill = TRUE, idcol=TRUE)
NodeGPS[,c('Latitude','Longitude')] <- round(NodeGPS[,c('Latitude','Longitude')],4)
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLat=abs(Latitude-lag(Latitude)))
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLong=abs(Longitude-lag(Longitude)))
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLong=abs(Longitude-lag(Longitude)))%>% ungroup()
NodeGPS <- NodeGPS[NodeGPS$difLat > .0002 | NodeGPS$difLat == NA & NodeGPS$difLong > .0002 |NodeGPS$difLong == NA,]
View(NodeGPS)
NodeGPS <- rbindlist(l = Nodegps,use.names = TRUE,fill = TRUE, idcol=TRUE)
NodeGPS[,c('Latitude','Longitude')] <- round(NodeGPS[,c('Latitude','Longitude')],4)
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLat=abs(Latitude-lag(Latitude)))
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLong=abs(Longitude-lag(Longitude)))%>% ungroup()
str(NodeGPS)
NodeGPS <- NodeGPS[NodeGPS$difLat !< .0002  & NodeGPS$difLong !< .0002 ,]
NodeGPS <- NodeGPS[NodeGPS$difLat > .0002 | NodeGPS$difLat == NA ,]
View(NodeGPS)
NodeGPS <- rbindlist(l = Nodegps,use.names = TRUE,fill = TRUE, idcol=TRUE)
NodeGPS[,c('Latitude','Longitude')] <- round(NodeGPS[,c('Latitude','Longitude')],4)
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLat=abs(Latitude-lag(Latitude)))
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLong=abs(Longitude-lag(Longitude)))%>% ungroup
NodeGPS <- NodeGPS[NodeGPS$difLat > .0002,]
View(NodeGPS)
NodeGPS <- rbindlist(l = Nodegps,use.names = TRUE,fill = TRUE, idcol=TRUE)
NodeGPS[,c('Latitude','Longitude')] <- round(NodeGPS[,c('Latitude','Longitude')],4)
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLat=abs(Latitude-lag(Latitude)))
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLong=abs(Longitude-lag(Longitude)))%>% ungroup
NodeGPS <- rbindlist(l = Nodegps,use.names = TRUE,fill = TRUE, idcol=TRUE)
NodeGPS[,c('Latitude','Longitude')] <- round(NodeGPS[,c('Latitude','Longitude')],4)
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLat=abs(Latitude-lag(Latitude)))%>%ungroup()
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLong=abs(Longitude-lag(Longitude)))%>% ungroup()
NodeGPS <- NodeGPS[NodeGPS$difLat > .0002,]
View(NodeGPS)
NodeGPS <- rbindlist(l = Nodegps,use.names = TRUE,fill = TRUE, idcol=TRUE)
NodeGPS[,c('Latitude','Longitude')] <- round(NodeGPS[,c('Latitude','Longitude')],4)
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLat=abs(Latitude-lag(Latitude)))%>%ungroup()
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLong=abs(Longitude-lag(Longitude)))%>% ungroup()
str(NodeGPS)
NodeGPS$difLat[is.na(NodeGPS$difLat)] <- 0
NodeGPS$difLong[is.na(NodeGPS$difLong)] <- 0
NodeGPS <- NodeGPS[NodeGPS$difLat > .0002 | NodeGPS$difLat == 0,]
View(NodeGPS)
NodeGPS <- NodeGPS[NodeGPS$difLong > .0002 |NodeGPS$difLong == 0,]
NodeGPS <- rbindlist(l = Nodegps,use.names = TRUE,fill = TRUE, idcol=TRUE)
NodeGPS[,c('Latitude','Longitude')] <- round(NodeGPS[,c('Latitude','Longitude')],4)
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLat=abs(Latitude-lag(Latitude)))%>%ungroup()
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLong=abs(Longitude-lag(Longitude)))%>% ungroup()
NodeGPS$difLat[is.na(NodeGPS$difLat)] <- 0
NodeGPS$difLong[is.na(NodeGPS$difLong)] <- 0
NodeGPS <- NodeGPS[NodeGPS$difLat > .0002 | NodeGPS$difLat == 0 &
NodeGPS$difLong > .0002 |NodeGPS$difLong == 0,]
NodeGPS <- rbindlist(l = Nodegps,use.names = TRUE,fill = TRUE, idcol=TRUE)
NodeGPS[,c('Latitude','Longitude')] <- round(NodeGPS[,c('Latitude','Longitude')],4)
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLat=abs(Latitude-lag(Latitude)))%>%ungroup()
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLong=abs(Longitude-lag(Longitude)))%>% ungroup()
NodeGPS$difLat[is.na(NodeGPS$difLat)] <- 0
NodeGPS$difLong[is.na(NodeGPS$difLong)] <- 0
NodeGPS <- NodeGPS[NodeGPS$difLat > .0002 | NodeGPS$difLat == 0 ,]
NodeGPS <- NodeGPS[NodeGPS$difLong > .0002 |NodeGPS$difLong == 0,]
head(NodeGPS)
Dates <- seq.POSIXt("2021-10-10", "2021-12-17",by = 1)
str(NodeGPS)
Dates <- seq.POSIXct("2021-10-10", "2021-12-17",by = 1)
Dates <- seq.Date("2021-10-10", "2021-12-17",by = 1)
Dates <- seq.Date(as.Date("2021-10-10"), as.Date("2021-12-17",by = 1))
Dates <- seq.Date(as.Date("2021-10-10"), as.Date("2021-12-17"),by = 1)
?if
if(Dates[i]== NodesGPS$Date){Dates[i] <- as.data.frame(.id=character(), Time=as.POSIXct(),
Latitude=numeric(), Longitude=numeric())
Dates[i] <- rbind(Dates[i], NodeGPS[i])}
if(Dates[i]== NodeGPS$Date){Dates[i] <- as.data.frame(.id=character(), Time=as.POSIXct(),
Latitude=numeric(), Longitude=numeric())
Dates[i] <- rbind(Dates[i], NodeGPS[i])}
?left_join
?left_join.data.frame
Dates <- as.data.frame(Date=seq.Date(as.Date("2021-10-10"), as.Date("2021-12-17"),by = 1))
Dates <- data.frame(Date=seq.Date(as.Date("2021-10-10"), as.Date("2021-12-17"),by = 1))
View(Dates)
?merge
NodesbyDate <- merge(NodeGPS, Dates, by="Date", all.y = TRUE)
View(NodesbyDate)
?distinct
NodeGPS <- distinct(NodeGPS, .id,  Latitude, Longitude, Date)
NodesbyDate <- merge(NodeGPS, Dates, by="Date", all.y = TRUE)
NodeGPS <- rbindlist(l = Nodegps,use.names = TRUE,fill = TRUE, idcol=TRUE)
NodeGPS[,c('Latitude','Longitude')] <- round(NodeGPS[,c('Latitude','Longitude')],4)
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLat=abs(Latitude-lag(Latitude)))%>%ungroup()
NodeGPS <- NodeGPS%>%group_by(.id, Date)%>%mutate(difLong=abs(Longitude-lag(Longitude)))%>% ungroup()
NodeGPS$difLat[is.na(NodeGPS$difLat)] <- 0
NodeGPS$difLong[is.na(NodeGPS$difLong)] <- 0
NodeGPS <- NodeGPS[NodeGPS$difLat > .0002 | NodeGPS$difLat == 0 ,]
NodeGPS <- NodeGPS[NodeGPS$difLong > .0002 |NodeGPS$difLong == 0,]
NodeGPS <- distinct(NodeGPS, .id,  Latitude, Longitude, Date, .keep_all = TRUE)
NodesbyDate <- merge(NodeGPS, Dates, by="Date", all.y = TRUE)
?split
NodesbyDateList <- split(NodesbyDate, by=Date)
NodesbyDateList <- split(NodesbyDate, by="Date")
NodesbyDateList <- split(NodesbyDate, "Date")
View(NodesbyDateList)
NodesbyDate$Date <- as.factor(NodesbyDate$Date)
NodesbyDateList <- split(NodesbyDate, "Date")
NodesbyDateList <- split(NodesbyDate, f=NodesbyDate$Date)
View(NodesbyDateList)
15675-13623
3517.09-2171.16
e <-  list.files(file.path(myout, "nodes"), pattern="beep",recursive = TRUE, full.names = TRUE)
myout <- "C:/Users/eliwi/OneDrive/Documents/Supercomputer"
e <-  list.files(file.path(myout, "nodes"), pattern="beep",recursive = TRUE, full.names = TRUE)
e
df <- read_csv("C:/Users/eliwi/OneDrive/Documents/Supercomputer/nodes/33B32D/beep_0.csv")
library(readr)
df <- read_csv("C:/Users/eliwi/OneDrive/Documents/Supercomputer/nodes/33B32D/beep_0.csv")
df[209370,]
badlines <- grep("[^ -~]", df$time)
if (length(badlines) > 0) { df <- df[-badlines,]}
badlines <- grep("[[:digit:]]-", df$time, invert=TRUE)
badlines <- grep("[^ -~]", df$id)
if (length(badlines) > 0) { df <- df[-badlines,]}
#badlines <- grep("[[:digit:]]-", df$id, invert=TRUE)
#if (length(badlines) > 0) { df <- df[-badlines,]}
df <- df[complete.cases(df),]
?Postgres
?split
install.packages("officer")
library(officer)
CamDoc <- read_docx("C:/Users/eliwi/OneDrive/Documents/UNR/SpringProtectionsCams.docx")
getwd()
CamDoc <- read_docx("C:/Users/eliwi/OneDrive/Documents/UNR/SpringProtectionCams.docx")
CamDoc2 <- doc_summary(CamDoc)
CamDoc2 <- docx_summary(CamDoc)
View(CamDoc2)
?grepl
grepl("\:", CamDoc2$text)
grepl(":", CamDoc2$text)
result <- lapply(split(CamDoc2, cumsum(grepl(':', CamDoc2$text))), function(x) x[-1, ])
View(result)
names(result) <- paste0('df', seq_along(result))
View(result)
result2 <- lapply(split(CamDoc2, cumsum(grepl(':', CamDoc2$text))))
result2 <- split(CamDoc2, cumsum(grepl(':', CamDoc2$text)))
View(result2)
which(grepl(":", CamDoc2$text) == TRUE)
idx <- which(grepl(":", CamDoc2$text) == TRUE)
names <- result[idk, 4]
names <- result[idx, 4]
names <- CamDoc2[idx, 4]
View(result)
result[["df3"]]
result[["df2"]]
View(result2)
names(result) <- names
View(result)
View(CamDoc2)
idx
lapply(result, function (x) length(x))
lapply(result, function (x) nrows(x))
lapply(result, function (x) nrow(x))
which(lapply(result, function (x) nrow(x)) < 27)
idx
?diff
diff(idx)
hist(diff(idx))
unique(grepl("-", CamDoc2$text) == TRUE)
which(grepl("-", CamDoc2$text) == TRUE)
idx2 <- which(grepl("-", CamDoc2$text) == TRUE)
idx2 <- which(grepl("-", CamDoc2$text) == TRUE)
Sp <- CamDoc2[idx2, 4]
SpU <- unique(Sp)
SpU
SpU2 <- as.data.frame(SpU)
View(SpU2)
Cam <- read.csv("C:/Users/eliwi/OneDrive/Documents/UNR/Camera Data 2022.csv")
data(recordTableSample)
library(camtrapR)
data(recordTableSample)
View(recordTableSample)
data(camtraps)
View(camtraps)
View(Cam)
library(dplyr)
str(Cam)
Cam$First.Photo.Date <- as.Date(Cam$First.Photo.Date)
str(Cam)
Cam <- read.csv("C:/Users/eliwi/OneDrive/Documents/UNR/Camera Data 2022.csv")
str(Cam)
?as.Date
Cam$First.Photo.Date <- as.Date(Cam$First.Photo.Date, format = "%m-%d-%y")
Cam <- read.csv("C:/Users/eliwi/OneDrive/Documents/UNR/Camera Data 2022.csv")
Cam$First.Photo.Date <- as.Date(Cam$First.Photo.Date, format = "%m/%d/%y")
Cam$What.is.date.of.last.photo. <- as.Date(Cam$What.is.date.of.last.photo., format = "%m/%d/%y")
Cam%>%group_by(Spring.Camera)%>%range(First.Photo.Date)
Cam%>%group_by(Spring.Camera)%>%range(x$First.Photo.Date)
Cam%>%group_by(Spring.Camera)%>%range(.$First.Photo.Date)
Cam %>% group_by(Spring.Camera) %>% range(.$First.Photo.Date)
?range
Cam %>% group_by(Spring.Camera) %>% summarise(range=range(First.Photo.Date))
Cam <- read.csv("C:/Users/eliwi/OneDrive/Documents/UNR/CameraData22.csv")
str(Cam)
Cam$First.Photo.Date <- as.Date(Cam$First.Photo.Date, format = "%m/%d/%y")
Cam$What.is.date.of.last.photo. <- as.Date(Cam$What.is.date.of.last.photo., format = "%m/%d/%y")
Cam %>% group_by(CamID) %>% summarise(range=range(First.Photo.Date))
Cam %>% group_by(CamID) %>% summarise(min=min(First.Photo.Date),max=max(What.is.date.of.last.photo.))
camdf <- read.csv("C:/Users/eliwi/OneDrive/Documents/R/TTE/TTE/images.csv")
table(camdf$deployment_id)
df <- df[,c(2,4,16,17,22)]
df <- camdf#[camdf$common_name=="Mule Deer",]
df <- df[,c(2,4,16,17,22)]
colnames(df) <- c("cam", "file","datetime","count","comments")
df$datetime <- as.POSIXct(df$datetime,format="%Y-%m-%d %H:%M:%S", tz="America/Denver")
View(df)
View(camdf)
library(tidyr)
?pivot_longer
View(Cam)
Cam2 <- Cam%>%pivot_longer(cols = 11:35,
names_to = "species",
values_to = "Detection.Dates")
View(Cam2)
Cam <- read.csv("C:/Users/eliwi/OneDrive/Documents/UNR/CameraData22.csv", na.strings = c("", "N/A"))
Cam$First.Photo.Date <- as.Date(Cam$First.Photo.Date, format = "%m/%d/%y")
Cam$What.is.date.of.last.photo. <- as.Date(Cam$What.is.date.of.last.photo., format = "%m/%d/%y")
Cam2 <- Cam%>%pivot_longer(cols = 11:35,
names_to = "species",
values_to = "Detection.Dates")
Cam3 <- Cam3[!is.na(Cam2$Detection.Dates)]
Cam3 <- Cam2[!is.na(Cam2$Detection.Dates)]
Cam3 <- Cam2[!is.na(Cam2$Detection.Dates),]
View(Cam3)
str(Cam3)
Cam3$Detection.Dates <- as.vector(Cam3$Detection.Dates)
str(Cam3)
View(Cam3)
z <- Cam3$Detection.Dates
z
z <- strsplit(Cam3$Detection.Dates, ",")
View(z)
z <- lapply(strsplit(Cam3$Detection.Dates, ","))
z <- lapply(Cam3$Detection.Dates, function (x) strsplit(x, ","))
View(z)
zz <- lapply(z, function (x) strsplit(x, ","))
strsplit(Cam3$Detection.Dates[1], ",")
zz <- sapply(z, function (x) strsplit(x, ","))
View(z)
z <- Cam3$Detection.Dates
zz <- sapply(z, function (x) strsplit(x, ","))
View(zz)
Cam <- read.csv("C:/Users/eliwi/OneDrive/Documents/UNR/CameraData22.csv", na.strings = c("", "N/A"))
Cam$First.Photo.Date <- as.Date(Cam$First.Photo.Date, format = "%m/%d/%y")
Cam$What.is.date.of.last.photo. <- as.Date(Cam$What.is.date.of.last.photo., format = "%m/%d/%y")
Cam2 <- Cam%>%pivot_longer(cols = 11:35,
names_to = "species",
values_to = "Detection.Dates")
library(dplyr)
library(tidyr)
Cam2 <- Cam%>%pivot_longer(cols = 11:35,
names_to = "species",
values_to = "Detection.Dates")
Cam3 <- Cam2[!is.na(Cam2$Detection.Dates),]
z <- Cam3$Detection.Dates
zz <- sapply(z, function (x) strsplit(x, ","))
View(zz)
zz <- lapply(z, function (x) strsplit(x, ","))
View(zz)
View(Cam3)
strsplit(zz[[1]], ",")
strsplit(zz[[1]][[1]], ",")
zz <- sapply(z, function (x) strsplit(x, ","))
View(zz)
strsplit(zz[[1]], ",")
zzz <- sapply(zz, y=Cam3$species, function (x, y) paste(y,strsplit(x, ",")))
View(zzz)
?Map
zzz <- Map(x=zz, y=Cam3$species, function (x, y) paste(y,strsplit(x, ",")))
View(zzz)
Cam4 <- separate_rows(Cam3, Detection.Dates, sep=",")
View(Cam4)
data(recordTableSample)
library(camtrapR)
data(recordTableSample)
data(camtraps)
#CI Station Info similar to data(camtraps), input for summaries in CamTrapR
StationInfo <- Cam %>% group_by(CamID) %>% summarise(min=min(First.Photo.Date),max=max(What.is.date.of.last.photo.))
View(StationInfo)
View(recordTableSample)
camdf <- read.csv("C:/Users/eliwi/OneDrive/Documents/R/TTE/TTE/images.csv")
df <- camdf#[camdf$common_name=="Mule Deer",]
df <- df[,c(2,4,16,17,22)]
colnames(df) <- c("cam", "file","datetime","count","comments")
df$datetime <- as.POSIXct(df$datetime,format="%Y-%m-%d %H:%M:%S", tz="America/Denver")
#fawns?
df <- dplyr::filter(df, !(count==1 & comments== "fawn"))
#replace BUSH3 with BUSH4
BUSH3 <- which(df$cam == "BUSH3")
df$cam <- replace(x = df$cam,list=BUSH3, values = "BUSH4")
df$cam <- as.factor(df$cam)
df$file <- paste(df$cam,df$file,df$datetime, sep="/")
colnames(df)[1:3] <- c("Station","FileName","DateTimeOriginal")
df$Species <- "Mule Deer"
intable <- data.frame(df,
delta.time.secs  = NA,
delta.time.mins  = NA,
delta.time.hours = NA,
delta.time.days  = NA,
independent      = ifelse(minDeltaTime == 0, TRUE, NA),   # all independent if no temporal filtering
stringsAsFactors = FALSE,
check.names      = FALSE)        # to prevent ":" being converted to ".", e.g. in EXIF:Mak
minDeltaTime <- 60
intable <- data.frame(df,
delta.time.secs  = NA,
delta.time.mins  = NA,
delta.time.hours = NA,
delta.time.days  = NA,
independent      = ifelse(minDeltaTime == 0, TRUE, NA),   # all independent if no temporal filtering
stringsAsFactors = FALSE,
check.names      = FALSE)        # to prevent ":" being converted to ".", e.g. in EXIF:Mak
View(intable)
UnIDMam <- Cam4[Cam4$species == "unID.Mammal"]
UnIDMam <- Cam4[Cam4$species == "unID.Mammal",]
View(UnIDMam)
load("~/UNR/eco-dif.RData")
View(fileinfo)
table(fileinfo$UnID)
table(fileinfo$Turdus.migratorius)
?specpool
library(vegan)
?specpool
View(poolsites)
poolsites$Obsfull <- 'x'
poolsites$bootfull <- 'x'
poolsites$bootfullse <- 'x'
filepool<- fileinfo
file = 1
sitenames<- unique(fileinfo$site)
nsitenames<- length(unique(fileinfo$site))
#fileinfo <- read.csv("C:/Users/hamme/Dropbox/GBLCC P-J Project/PAPERS/Avian Acoustics/birdspecies_fixed.csv")
fileinfo$site<- paste(fileinfo$Year, fileinfo$Region, fileinfo$Season, fileinfo$Tripod)
fileinfo$site<- as.factor(fileinfo$site)
unique(fileinfo$site)
fileinfo$site<-as.character(fileinfo$site)
fileinfo$site[fileinfo$site == "2018 Austin Spring I "] <- "2018 Austin Spring I"
fileinfo$site<- as.factor(fileinfo$site)
for(file in 1:nsitenames){
thisfile <- sitenames[file]
sub <- subset(filepool,site==thisfile)
sub1<- subset(sub, select = -c(Year, Region, Tripod, Season, FileDate, FileStartTime, file, site, Condition, rec, time, DATE, JDAY))
#estimates extrapolated species richness
p1<-specpool(sub1, smallsample = TRUE)
poolsites$Obsfull[poolsites$sitenames == thisfile]<- p1$Species
poolsites$bootfull[poolsites$sitenames == thisfile]<- p1$boot
poolsites$bootfullse[poolsites$sitenames == thisfile]<- p1$boot.se
}
for(file in 1:nsitenames){
thisfile <- sitenames[file]
sub <- subset(filepool,site==thisfile)
sub1<- subset(sub, select = -c(Year, Region, Tripod, Season, FileDate, FileStartTime, file, site, Condition, rec, time))
#estimates extrapolated species richness
p1<-specpool(sub1, smallsample = TRUE)
poolsites$Obsfull[poolsites$sitenames == thisfile]<- p1$Species
poolsites$bootfull[poolsites$sitenames == thisfile]<- p1$boot
poolsites$bootfullse[poolsites$sitenames == thisfile]<- p1$boot.se
}
View(filepool)
library(dplyr)
library(ggplot2)
library(reshape2)
#install.packages("tidyr")
library(tidyr)
require(utils)
for(file in 1:nsitenames){
thisfile <- sitenames[file]
sub <- subset(filepool,site==thisfile)
sub1<- subset(sub, select = -c(Year, Region, Tripod, Season, FileDate, FileStartTime, file, site, Condition, rec, time))
#estimates extrapolated species richness
p1<-specpool(sub1, smallsample = TRUE)
poolsites$Obsfull[poolsites$sitenames == thisfile]<- p1$Species
poolsites$bootfull[poolsites$sitenames == thisfile]<- p1$boot
poolsites$bootfullse[poolsites$sitenames == thisfile]<- p1$boot.se
}
for(file in 1:nsitenames){
thisfile <- sitenames[file]
sub <- subset(filepool,site==thisfile)
sub1<- subset(sub, select = -c(Year, Region, Tripod, Season, FileDate, FileStartTime, file, site, Condition, rec, time))
#estimates extrapolated species richness
p1<-specpool(sub1, smallsample = TRUE)
poolsites$Obsfull[poolsites$sitenames == thisfile]<- p1$Species
poolsites$bootfull[poolsites$sitenames == thisfile]<- p1$boot
poolsites$bootfullse[poolsites$sitenames == thisfile]<- p1$boot.se
}
thisfile <- sitenames[file]
sub <- subset(filepool,site==thisfile)
sub1<- subset(sub, select = -c(Year, Region, Tripod, Season, FileDate, FileStartTime, file, site, Condition, rec, time))
library(tidyverse)
sub1<- subset(sub, select = -c(Year, Region, Tripod, Season, FileDate, FileStartTime, file, site, Condition, rec, time))
DeerTime <- read.csv("./Ungs.csv")
DeerTime <- read.csv("./Ungulates.csv")
setwd("C:/Users/eliwi/OneDrive/Documents/UNR/")
library(camtrapR)
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
library(data.table)
library(vegan)
DeerTime <- read.csv("./Ungulates.csv")
View(DeerTime)
DeerTime$DateTime <- as.POSIXct(paste(DeerTime$Date, DeerTime$Time), format="%d/%m/%Y %H:%M:%S")
str(DeerTime)
sort(DeerTime$DateTime)
DeerTime2 <- DeerTime%>%group_by(Spring)%>%sort(DateTime)
?sort
DeerTime2 <- DeerTime%>%group_by(Spring)%>%arrange(DateTime)
View(DeerTime2)
DeerTime$DateTime <- as.POSIXct(paste(DeerTime$Date, DeerTime$Time), format="%m/%d/%Y %H:%M:%S")
DeerTime2 <- DeerTime%>%group_by(Spring)%>%arrange(DateTime)
?arrange
DeerTime2 <- DeerTime%>%group_by(Spring)%>%arrange(DateTime, .by_group = TRUE)
?difftime
DeerTime2$DateTime[2]-DeerTime2$DateTime[1]
?lag
DeerTime2 <- DeerTime%>%group_by(Spring)%>%arrange(DateTime, .by_group = TRUE)%>%mutate(returntime = DateTime - lag(DateTime, default = first(DateTime)))
View(DeerTime2)
str(DeerTime2)
DeerTime2 <- DeerTime%>%group_by(Spring)%>%arrange(DateTime, .by_group = TRUE)%>%mutate(returntime = difftime(DateTime, lag(DateTime, default = first(DateTime)), units = "hours"))
DeerTime2 <- DeerTime%>%group_by(Spring)%>%arrange(DateTime, .by_group = TRUE)%>%mutate(returntime = difftime(DateTime, lag(DateTime, default = first(DateTime)), units = "days"))
DeerTime2 <- DeerTime%>%group_by(Spring)%>%arrange(DateTime, .by_group = TRUE)%>%mutate(returntime = difftime(DateTime, lag(DateTime), units = "days"))
DeerTime2%>%summarise(meanRT=mean(returntime))
?mean
DeerTime2%>%summarise(meanRT=mean(returntime,na.rm=T))
