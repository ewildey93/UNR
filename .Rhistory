View(SpU2)
Cam <- read.csv("C:/Users/eliwi/OneDrive/Documents/UNR/Camera Data 2022.csv")
data(recordTableSample)
library(camtrapR)
data(recordTableSample)
View(recordTableSample)
data(camtraps)
View(camtraps)
View(Cam)
library(dplyr)
str(Cam)
Cam$First.Photo.Date <- as.Date(Cam$First.Photo.Date)
str(Cam)
Cam <- read.csv("C:/Users/eliwi/OneDrive/Documents/UNR/Camera Data 2022.csv")
str(Cam)
?as.Date
Cam$First.Photo.Date <- as.Date(Cam$First.Photo.Date, format = "%m-%d-%y")
Cam <- read.csv("C:/Users/eliwi/OneDrive/Documents/UNR/Camera Data 2022.csv")
Cam$First.Photo.Date <- as.Date(Cam$First.Photo.Date, format = "%m/%d/%y")
Cam$What.is.date.of.last.photo. <- as.Date(Cam$What.is.date.of.last.photo., format = "%m/%d/%y")
Cam%>%group_by(Spring.Camera)%>%range(First.Photo.Date)
Cam%>%group_by(Spring.Camera)%>%range(x$First.Photo.Date)
Cam%>%group_by(Spring.Camera)%>%range(.$First.Photo.Date)
Cam %>% group_by(Spring.Camera) %>% range(.$First.Photo.Date)
?range
Cam %>% group_by(Spring.Camera) %>% summarise(range=range(First.Photo.Date))
Cam <- read.csv("C:/Users/eliwi/OneDrive/Documents/UNR/CameraData22.csv")
str(Cam)
Cam$First.Photo.Date <- as.Date(Cam$First.Photo.Date, format = "%m/%d/%y")
Cam$What.is.date.of.last.photo. <- as.Date(Cam$What.is.date.of.last.photo., format = "%m/%d/%y")
Cam %>% group_by(CamID) %>% summarise(range=range(First.Photo.Date))
Cam %>% group_by(CamID) %>% summarise(min=min(First.Photo.Date),max=max(What.is.date.of.last.photo.))
camdf <- read.csv("C:/Users/eliwi/OneDrive/Documents/R/TTE/TTE/images.csv")
table(camdf$deployment_id)
df <- df[,c(2,4,16,17,22)]
df <- camdf#[camdf$common_name=="Mule Deer",]
df <- df[,c(2,4,16,17,22)]
colnames(df) <- c("cam", "file","datetime","count","comments")
df$datetime <- as.POSIXct(df$datetime,format="%Y-%m-%d %H:%M:%S", tz="America/Denver")
View(df)
View(camdf)
library(tidyr)
?pivot_longer
View(Cam)
Cam2 <- Cam%>%pivot_longer(cols = 11:35,
names_to = "species",
values_to = "Detection.Dates")
View(Cam2)
Cam <- read.csv("C:/Users/eliwi/OneDrive/Documents/UNR/CameraData22.csv", na.strings = c("", "N/A"))
Cam$First.Photo.Date <- as.Date(Cam$First.Photo.Date, format = "%m/%d/%y")
Cam$What.is.date.of.last.photo. <- as.Date(Cam$What.is.date.of.last.photo., format = "%m/%d/%y")
Cam2 <- Cam%>%pivot_longer(cols = 11:35,
names_to = "species",
values_to = "Detection.Dates")
Cam3 <- Cam3[!is.na(Cam2$Detection.Dates)]
Cam3 <- Cam2[!is.na(Cam2$Detection.Dates)]
Cam3 <- Cam2[!is.na(Cam2$Detection.Dates),]
View(Cam3)
str(Cam3)
Cam3$Detection.Dates <- as.vector(Cam3$Detection.Dates)
str(Cam3)
View(Cam3)
z <- Cam3$Detection.Dates
z
z <- strsplit(Cam3$Detection.Dates, ",")
View(z)
z <- lapply(strsplit(Cam3$Detection.Dates, ","))
z <- lapply(Cam3$Detection.Dates, function (x) strsplit(x, ","))
View(z)
zz <- lapply(z, function (x) strsplit(x, ","))
strsplit(Cam3$Detection.Dates[1], ",")
zz <- sapply(z, function (x) strsplit(x, ","))
View(z)
z <- Cam3$Detection.Dates
zz <- sapply(z, function (x) strsplit(x, ","))
View(zz)
Cam <- read.csv("C:/Users/eliwi/OneDrive/Documents/UNR/CameraData22.csv", na.strings = c("", "N/A"))
Cam$First.Photo.Date <- as.Date(Cam$First.Photo.Date, format = "%m/%d/%y")
Cam$What.is.date.of.last.photo. <- as.Date(Cam$What.is.date.of.last.photo., format = "%m/%d/%y")
Cam2 <- Cam%>%pivot_longer(cols = 11:35,
names_to = "species",
values_to = "Detection.Dates")
library(dplyr)
library(tidyr)
Cam2 <- Cam%>%pivot_longer(cols = 11:35,
names_to = "species",
values_to = "Detection.Dates")
Cam3 <- Cam2[!is.na(Cam2$Detection.Dates),]
z <- Cam3$Detection.Dates
zz <- sapply(z, function (x) strsplit(x, ","))
View(zz)
zz <- lapply(z, function (x) strsplit(x, ","))
View(zz)
View(Cam3)
strsplit(zz[[1]], ",")
strsplit(zz[[1]][[1]], ",")
zz <- sapply(z, function (x) strsplit(x, ","))
View(zz)
strsplit(zz[[1]], ",")
zzz <- sapply(zz, y=Cam3$species, function (x, y) paste(y,strsplit(x, ",")))
View(zzz)
?Map
zzz <- Map(x=zz, y=Cam3$species, function (x, y) paste(y,strsplit(x, ",")))
View(zzz)
Cam4 <- separate_rows(Cam3, Detection.Dates, sep=",")
View(Cam4)
data(recordTableSample)
library(camtrapR)
data(recordTableSample)
data(camtraps)
#CI Station Info similar to data(camtraps), input for summaries in CamTrapR
StationInfo <- Cam %>% group_by(CamID) %>% summarise(min=min(First.Photo.Date),max=max(What.is.date.of.last.photo.))
View(StationInfo)
View(recordTableSample)
camdf <- read.csv("C:/Users/eliwi/OneDrive/Documents/R/TTE/TTE/images.csv")
df <- camdf#[camdf$common_name=="Mule Deer",]
df <- df[,c(2,4,16,17,22)]
colnames(df) <- c("cam", "file","datetime","count","comments")
df$datetime <- as.POSIXct(df$datetime,format="%Y-%m-%d %H:%M:%S", tz="America/Denver")
#fawns?
df <- dplyr::filter(df, !(count==1 & comments== "fawn"))
#replace BUSH3 with BUSH4
BUSH3 <- which(df$cam == "BUSH3")
df$cam <- replace(x = df$cam,list=BUSH3, values = "BUSH4")
df$cam <- as.factor(df$cam)
df$file <- paste(df$cam,df$file,df$datetime, sep="/")
colnames(df)[1:3] <- c("Station","FileName","DateTimeOriginal")
df$Species <- "Mule Deer"
intable <- data.frame(df,
delta.time.secs  = NA,
delta.time.mins  = NA,
delta.time.hours = NA,
delta.time.days  = NA,
independent      = ifelse(minDeltaTime == 0, TRUE, NA),   # all independent if no temporal filtering
stringsAsFactors = FALSE,
check.names      = FALSE)        # to prevent ":" being converted to ".", e.g. in EXIF:Mak
minDeltaTime <- 60
intable <- data.frame(df,
delta.time.secs  = NA,
delta.time.mins  = NA,
delta.time.hours = NA,
delta.time.days  = NA,
independent      = ifelse(minDeltaTime == 0, TRUE, NA),   # all independent if no temporal filtering
stringsAsFactors = FALSE,
check.names      = FALSE)        # to prevent ":" being converted to ".", e.g. in EXIF:Mak
View(intable)
UnIDMam <- Cam4[Cam4$species == "unID.Mammal"]
UnIDMam <- Cam4[Cam4$species == "unID.Mammal",]
View(UnIDMam)
BatDat <- read.delim("C:/Users/eliwi/OneDrive/Documents/UNR/DVSTRI4_B2SonoBat.txt")
str(BatDat)
View(BatDat)
BatDat2 <- BatDat[,c(1:6, 9, 10)]
View(BatDat2)
table(BatDat2$SppAccp)
table(BatDat2$X.Spp)
unique(BatDat2$SppAccp)
BatDat2 <- BatDat2%>%mutate("CommonName" = case_when(SppAccp =="Myev" ~ "Long-Eared Myotis",
SppAccp == "Epfu" ~"Big Brown Bat",
SppAccp == "Myci" ~ "Western Small-Footed Myotis",
SppAccp == "Lano" ~ "Silver-Haired Bat",
SppAccp == "Myth" ~ "Fringed Myotis",
SppAccp == "Tabr" ~ "Brazilian Free-Tailed Bat",
SppAccp == "Myca" ~ "California Myotis",
SppAccp == "Mylu" ~ "Little Brown Myotis",
SppAccp == "Pahe" ~ "Western Pipistrelle",
SppAccp == "Long-Legged Myotis"))
####Sonobat Data###########
library(dplyr)
BatDat2 <- BatDat2%>%mutate("CommonName" = case_when(SppAccp =="Myev" ~ "Long-Eared Myotis",
SppAccp == "Epfu" ~"Big Brown Bat",
SppAccp == "Myci" ~ "Western Small-Footed Myotis",
SppAccp == "Lano" ~ "Silver-Haired Bat",
SppAccp == "Myth" ~ "Fringed Myotis",
SppAccp == "Tabr" ~ "Brazilian Free-Tailed Bat",
SppAccp == "Myca" ~ "California Myotis",
SppAccp == "Mylu" ~ "Little Brown Myotis",
SppAccp == "Pahe" ~ "Western Pipistrelle",
SppAccp == "Long-Legged Myotis"))
BatDat2 <- BatDat2%>%mutate("CommonName" = case_when(SppAccp =="Myev" ~ "Long-Eared Myotis",
SppAccp == "Epfu" ~"Big Brown Bat",
SppAccp == "Myci" ~ "Western Small-Footed Myotis",
SppAccp == "Lano" ~ "Silver-Haired Bat",
SppAccp == "Myth" ~ "Fringed Myotis",
SppAccp == "Tabr" ~ "Brazilian Free-Tailed Bat",
SppAccp == "Myca" ~ "California Myotis",
SppAccp == "Mylu" ~ "Little Brown Myotis",
SppAccp == "Pahe" ~ "Western Pipistrelle",
SppAccp == "Myvo" ~"Long-Legged Myotis"))
View(BatDat2)
library(sf)
library(raster)
library(dplyr)
library(spData)
library(spDataLarge)
Springs <- read.csv("C:/Users/eliwi/OneDrive/Documents/UNR/Spring Locs.csv")
View(Springs)
providers
head(providers)
library(leaflet) # for interactive maps
head(providers)
providers
map <- leaflet() %>%
addProviderTiles(providers$Esri.WorldImagery)
map
map <- leaflet() %>%
addProviderTiles(providers$HERE.hybridDay)
map
map <- leaflet() %>%
addProviderTiles(providers$Esri.WorldStreetMap)
map
map <- leaflet() %>%
addProviderTiles(providers$Esri.WorldTopoMap)
map
map <- leaflet(data=Springs) %>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addMarkers(lng = ~Lon, lat = ~Lat,
label = ~Name,
popup = ~Name)
map
Springs$Code <- c("BBS", "DVS", "UC", "UIS")
setwd("C:/Users/eliwi/OneDrive/Documents/UNR")
Smammals <-read.csv('./SmammalData.csv')
str(Smammals)
Smammals%>%group_by(Spring)%>%length(unique(Species))
Smammals%>%group_by(Spring)%>%length(distinct(Species))
length(distinct(Smammals$Species))
length(unique(Smammals$Species))
Smammals%>%group_by(Spring)%>%length(unique(Species))
Smammals%>%group_by(Spring)%>%length(unique(.$Species))
Smammals%>%group_by(Spring)%>%length(unique(Smammals$Species))
?length
Smammals%>%group_by(Spring)%>%length(unique(Species))
Smammals%>%group_by(Spring)%>%summarise(Richness = length(unique(Species)))
?pivot_wider
library(tidyverse)
library(tidyverse)
?pivot_wider
View(Smammals)
Smammals%>%pivot_wider(names_from = Species, values_from = Species)
SmammalCount <- Smammals%>%pivot_wider(names_from = Species, values_from = Species)
View(SmammalCount)
SmammalCount <- Smammals%>%filter(Recap == "N")%>%
select(4,9)%>%group_by(Spring)%>%
pivot_wider(names_from = Species, values_from = count(Species))
?select
detach("package:raster", unload = TRUE)
SmammalCount <- Smammals%>%filter(Recap == "N")%>%
select(4,9)%>%group_by(Spring)%>%
pivot_wider(names_from = Species, values_from = count(Species))
SmammalCount <- Smammals%>%filter(Recap == "N")%>%
select(4,9)%>%group_by(Spring)%>%
pivot_wider(names_from = Species, values_fn = count(Species))
?pivot_wider
?count
SmammalCount <- Smammals%>%filter(Recap == "N")%>%
select(4,9)%>%group_by(Spring)%>%
pivot_wider(names_from = Species,values_from = Species ,values_fn = n)
SmammalCount <- Smammals%>%filter(Recap == "N")%>%
select(4,9)%>%group_by(Spring)%>%
pivot_wider(names_from = Species,values_from = Species ,values_fn = count)
SmammalCount <- Smammals%>%filter(Recap == "N")%>%
select(4,9)%>%group_by(Spring)%>%
pivot_wider(names_from = Species,values_from = Species ,values_fn = count(!is.na()))
SmammalCount <- Smammals%>%filter(Recap == "N")%>%
select(4,9)%>%group_by(Spring)%>%
pivot_wider(names_from = Species,values_from = Species ,values_fn = count(!is.na(Species)))
SmammalCount <- Smammals%>%filter(Recap == "N")%>%
select(4,9)%>%group_by(Spring)%>%
pivot_wider(names_from = Species,values_fn = count(!is.na(Species)))
SmammalCount <- Smammals%>%filter(Recap == "N")%>%
select(4,9)%>%group_by(Spring)%>%
pivot_wider(names_from = Species,values_from = Species ,values_fn = count(!is.na(.)))
SmammalCount <- Smammals%>%filter(Recap == "N")%>%
select(4,9)%>%group_by(Spring)%>%
pivot_wider(names_from = Species,values_from = Species)
View(SmammalCount)
SmammalCount <- Smammals%>%filter(Recap == "N")%>%
select(4,9)%>%
pivot_wider(names_from = Species,values_from = Species)
View(SmammalCount)
SmammalCount <- Smammals%>%filter(Recap == "N")%>%
select(4,9)%>%
pivot_wider(names_from = Species,values_from = length)
SmammalCount <- Smammals%>%ungroup()%>%filter(Recap == "N")%>%
select(4,9)%>%
pivot_wider(names_from = Species,values_from = length)
SmammalCount <- Smammals%>%ungroup()%>%filter(Recap == "N")%>%
select(4,9)%>%
pivot_wider(names_from = Species,values_from = Species)
SmammalCount <- Smammals%>%ungroup()%>%filter(Recap == "N")%>%
select(4,9)%>%
pivot_wider(names_from = Species,values_from = Species, values_fn = length)
View(SmammalCount)
install.packages("leafpop")
library(leafpop)
View(Springs)
ggplot(Smammals[Spring == "BBS"], aes(x=Species))  +
geom_bar(stat="count", position = "dodge") +
scale_fill_brewer(palette = "Set1")
ggplot(Smammals[Spring == "BBS",], aes(x=Species))  +
geom_bar(stat="count", position = "dodge") +
scale_fill_brewer(palette = "Set1")
Smammals[Spring == "BBS",]
ggplot(Smammals[Smammals$Spring == "BBS",], aes(x=Species))  +
geom_bar(stat="count", position = "dodge") +
scale_fill_brewer(palette = "Set1")
ggplot(Smammals[Smammals$Spring == "BBS",], aes(x=Species))  +
geom_bar(stat="count", position = "dodge") +
scale_fill_brewer()
ggplot(Smammals[Smammals$Spring == "BBS",], aes(x=Species))  +
geom_bar(stat="count", position = "dodge")
ggplot(Smammals[Smammals$Spring == "BBS" & Smammals$Recap== "N",], aes(x=Species))  +
geom_bar(stat="count", position = "dodge")
unique(Smammals$Species)
Smammals <- mutate(Smammals, labels= case_when(
Species == "Peromyscus maniculatus" ~ "P. maniculatis",
Species == "Tamias spp." ~ "Tamias sp.",
Species == "Microtus montanus" ~ "M. montanus",
Species == "Tamias minimus" | "Tamius minimus" ~ "T. minimus",
Species == "Lemmiscus curtatus" ~ "L.curtatus",
Species == "Dipodomys californicus" ~ "D.californicus",
Species == "Woodrat sp." ~ "Woodrat sp.",
Species == "Pocket mouse?" ~ "Pocket mouse?",
Species == "Kangaroo Rat" ~ "Kangaroo Rat",
Species == "Microtus spp." ~ "Microtus sp."
))
?gsub
unique(Smammals$Species)
Smammals$Species <- gsub(pattern = "spp.",replacement = "sp.",x = Smammals$Species)
unique(Smammals$Species)
Smammals$Species <- gsub(pattern = "Tamius",replacement = "Tamias",x = Smammals$Species)
unique(Smammals$Species)
Smammals <- mutate(Smammals, labels= case_when(
Species == "Peromyscus maniculatus" ~ "P. maniculatis",
Species == "Tamias spp." ~ "Tamias sp.",
Species == "Microtus montanus" ~ "M. montanus",
Species == "Tamias minimus"  ~ "T. minimus",
Species == "Lemmiscus curtatus" ~ "L.curtatus",
Species == "Dipodomys californicus" ~ "D.californicus",
Species == "Woodrat sp." ~ "Woodrat sp.",
Species == "Pocket mouse?" ~ "Pocket mouse",
Species == "Kangaroo Rat" ~ "Kangaroo Rat",
Species == "Microtus spp." ~ "Microtus sp."
))
ggplot(Smammals[Smammals$Spring == "BBS" & Smammals$Recap== "N",], aes(x=labels))  +
geom_bar(stat="count", position = "dodge")
Smammals <- mutate(Smammals, labels= case_when(
Species == "Peromyscus maniculatus" ~ "P. maniculatis",
Species == "Tamias sp." ~ "Tamias sp.",
Species == "Microtus montanus" ~ "M. montanus",
Species == "Tamias minimus"  ~ "T. minimus",
Species == "Lemmiscus curtatus" ~ "L.curtatus",
Species == "Dipodomys californicus" ~ "D.californicus",
Species == "Woodrat sp." ~ "Woodrat sp.",
Species == "Pocket mouse?" ~ "Pocket mouse",
Species == "Kangaroo Rat" ~ "Kangaroo Rat",
Species == "Microtus sp." ~ "Microtus sp."
))
ggplot(Smammals[Smammals$Spring == "BBS" & Smammals$Recap== "N",], aes(x=labels))  +
geom_bar(stat="count", position = "dodge")
ggplot(Smammals[Smammals$Spring == "BBS" & Smammals$Recap== "N",], aes(x=labels))  +
geom_bar(stat="count", position = "dodge") +
xlab("Species")
ggplot(Smammals[Smammals$Spring == "BBS" & Smammals$Recap== "N",], aes(x=labels))  +
geom_bar(stat="count", position = "dodge") +
xlab("Species") + ylab("Count of Individuals")
ggplot(Smammals[Smammals$Spring == "BBS" & Smammals$Recap== "N",], aes(x=labels, fill=labels))  +
geom_bar(stat="count", position = "dodge") +
xlab("Species") + ylab("Count of Individuals")
ggplot(Smammals[Smammals$Spring == "BBS" & Smammals$Recap== "N",], aes(x=labels, fill=labels))  +
geom_bar(stat="count", position = "dodge") +
xlab("Species") + ylab("Count of Individuals") +
theme(legend.position = "none")
my_list <- list()
loop<-for (i in 1:length(Springs$Name)) {
Spring<-Smammals%>% filter(Spring==i)
plot<-ggplot(Spring[Smammals$Recap == "N"], aes(x = labels, fill=labels)) +
geom_bar(stat="count", position = "dodge") +
ylab("Number of Individuals") + xlab("Species") +
theme(legend.position = "none")
my_list[[i]] <- plot
}
loop<-for (i in 1:length(Springs$Name)) {
Spring<-Smammals%>% filter(Spring==i)
plot<-ggplot(Spring[Smammals$Recap == "N",], aes(x = labels, fill=labels)) +
geom_bar(stat="count", position = "dodge") +
ylab("Number of Individuals") + xlab("Species") +
theme(legend.position = "none")
my_list[[i]] <- plot
}
View(my_list)
my_list <- list()
loop<-for (i in 1:length(Springs$Name)) {
Spring<-Smammals%>% filter(Spring==i)
plot<-ggplot(Spring[Spring$Recap == "N",], aes(x = labels, fill=labels)) +
geom_bar(stat="count", position = "dodge") +
ylab("Number of Individuals") + xlab("Species") +
theme(legend.position = "none")
my_list[[i]] <- plot
}
View(my_list)
View(Spring)
length(Springs$Name)
my_list <- list()
loop<-for (i in 1:length(Springs$Name)) {
Spring<-Smammals%>% filter(Spring==i)
plot<-ggplot(Spring[Spring$Recap == "N",], aes(x = labels, fill=labels)) +
geom_bar(stat="count", position = "dodge") +
ylab("Number of Individuals") + xlab("Species") +
theme(legend.position = "none")
my_list[[i]] <- plot
}
View(my_list)
View(Smammals)
my_list <- list()
loop<-for (i in 1:length(Springs$Code)) {
Spring<-Smammals%>% filter(Spring==i)
plot<-ggplot(Spring[Spring$Recap == "N",], aes(x = labels, fill=labels)) +
geom_bar(stat="count", position = "dodge") +
ylab("Number of Individuals") + xlab("Species") +
theme(legend.position = "none")
my_list[[i]] <- plot
}
View(my_list)
View(my_list)
my_list <- list()
loop<-for (i in 1:length(Springs$Code)) {
print(i)
Spring<-Smammals%>% filter(Spring==i)
plot<-ggplot(Spring[Spring$Recap == "N",], aes(x = labels, fill=labels)) +
geom_bar(stat="count", position = "dodge") +
ylab("Number of Individuals") + xlab("Species") +
theme(legend.position = "none")
my_list[[i]] <- plot
}
my_list <- list()
loop<-for (i in 1:length(Springs$Code)) {
print([i])
my_list <- list()
loop<-for (i in 1:length(Springs$Code)) {
print(Springs$Code[i])
Spring<-Smammals%>% filter(Spring==Springs$Code[i])
plot<-ggplot(Spring[Spring$Recap == "N",], aes(x = labels, fill=labels)) +
geom_bar(stat="count", position = "dodge") +
ylab("Number of Individuals") + xlab("Species") +
theme(legend.position = "none")
my_list[[i]] <- plot
}
View(my_list)
map <- leaflet(data=Springs) %>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addMarkers(lng = ~Lon, lat = ~Lat,
label = ~Name,
popup = popupGraph(my_list))
map
my_list <- list()
loop<-for (i in 1:length(Springs$Code)) {
print(Springs$Code[i])
Spring<-Smammals%>% filter(Spring==Springs$Code[i])
plot<-ggplot(Spring[Spring$Recap == "N",], aes(x = labels, fill=labels)) +
geom_bar(stat="count", position = "dodge") +
ylab("Number of Individuals") + xlab("Species") +
theme(legend.position = "none", axis.text.x = element_text(angle=45))
my_list[[i]] <- plot
}
map <- leaflet(data=Springs) %>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addMarkers(lng = ~Lon, lat = ~Lat,
label = ~Name,
popup = popupGraph(my_list))
map
###################functions###########################
addline_format <- function(x,...){
gsub('\\s','\n',x)
}
my_list <- list()
loop<-for (i in 1:length(Springs$Code)) {
print(Springs$Code[i])
Spring<-Smammals%>% filter(Spring==Springs$Code[i])
plot<-ggplot(Spring[Spring$Recap == "N",], aes(x = labels, fill=labels)) +
geom_bar(stat="count", position = "dodge") +
ylab("Number of Individuals") + xlab("Species") +
theme(legend.position = "none")
plot <- plot + scale_x_discrete(breaks=unique(Spring$labels),
labels=addline_format(Spring$labels))
my_list[[i]] <- plot
}
my_list <- list()
loop<-for (i in 1:length(Springs$Code)) {
print(Springs$Code[i])
Spring<-Smammals%>% filter(Spring==Springs$Code[i])
plot<-ggplot(Spring[Spring$Recap == "N",], aes(x = labels, fill=labels)) +
geom_bar(stat="count", position = "dodge") +
ylab("Number of Individuals") + xlab("Species") +
theme(legend.position = "none")
plot <- plot + scale_x_discrete(breaks=unique(Spring$labels),
labels=addline_format(unique(Spring$labels)))
my_list[[i]] <- plot
}
View(my_list)
map <- leaflet(data=Springs) %>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addMarkers(lng = ~Lon, lat = ~Lat,
label = ~Name,
popup = popupGraph(my_list))
my_list[[4]]
ggplot(Smammals[Smammals$Spring == "BBS" & Smammals$Recap== "N",], aes(x=labels, fill=labels))  +
geom_bar(stat="count", position = "dodge") +
xlab("Species") + ylab("Count of Individuals") +
theme(legend.position = "none") + scale_x_discrete(breaks=unique(Spring$labels),
labels=addline_format(unique(Spring$labels)))
