View(StationInfoSite)
View(StationInfo4)
#make detection history by Date
species <- unique(Cam4$species)
dH <- data.frame(Date=seq.Date(from=StationInfo$min, to=StationInfo$max, by=1))
#watch out for wrong dates (e.g. 01-01-2018)
cameras <- unique(Cam4$CamID)
#we can modify this to get specific springs to test species curves by number of days
for (i in 1:length(species)){
CamSub <- Cam4[Cam4$species == species[i],]
x <- sapply(dH$Date, function (x) ifelse(x %in% CamSub$Date, 1,0)) #replace 1 with length(CamSub$Date[CamSub$Date == x]) to get incidence at individual cameras
y <- sapply(dH$Date, function (Date) ifelse(Date %in% CamSub$Date, paste(paste(CamSub[CamSub$Date == Date,]$Spring, CamSub[CamSub$Date == Date,]$Line), collapse=", "),NA))
dH[ ,ncol(dH)+1] <- x                # Append new column
colnames(dH)[ncol(dH)] <- species[i] # Rename column name
dH[ ,ncol(dH)+1] <- y
colnames(dH)[ncol(dH)] <- colnames(dH)[ncol(dH)] <- paste(species[i], "SpringLine")
}
# setup and retrieval days default to 0.5 day effort from cameraOperation function
dH$TrapEffort <- sapply(dH$Date, function (x) sum(camOps[,as.character(x)], na.rm = T))
#Detection Histories by Site
Sites <- unique(Cam4$Spring)
species <- unique(Cam4$species)
dHList <- list()
for (s in 1:length(Sites)){
Cam5 <- Cam4[Cam4$Spring == Sites[s],]
dH <- data.frame(Date=seq.Date(from=StationInfo$min, to=StationInfo$max, by=1))
for (i in 1:length (species)){
CamSub <- Cam5[Cam5$species == species[i],]
x <- sapply(dH$Date, function (x) ifelse(x %in% CamSub$Date, 1,0)) #replace 1 with length(CamSub$Date[CamSub$Date == x]) to get incidence at individual cameras
y <- sapply(dH$Date, function (Date) ifelse(Date %in% CamSub$Date, paste(paste(CamSub[CamSub$Date == Date,]$Spring, CamSub[CamSub$Date == Date,]$Line), collapse=", "),NA))
dH[ ,ncol(dH)+1] <- x                # Append new column
colnames(dH)[ncol(dH)] <- species[i] # Rename column name
dH[ ,ncol(dH)+1] <- y
colnames(dH)[ncol(dH)] <- colnames(dH)[ncol(dH)] <- paste(species[i], "SpringLine")
}
dHList[[Sites[s]]] <- dH
}
dHbySite <- rbindlist(dHList, idcol="Site")
poolsites<- as.data.frame(Sites)
poolsites$Obsfull <- 'x'
poolsites$bootfull <- 'x'
poolsites$bootfullse <- 'x'
#get extrapolated species richness by site
for(s in 1:length(Sites)){
sub <- subset(dHbySite, Site== Sites[s])
grep(pattern= "SpringLine", colnames(sub))
sub1<- subset(sub, select = species)
#estimates extrapolated species richness
p1<-specpool(sub1, smallsample = TRUE)
poolsites$Obsfull[poolsites$Sites == Sites[s]]<- p1$Species
poolsites$bootfull[poolsites$Sites == Sites[s]]<- p1$boot
poolsites$bootfullse[poolsites$Sites == Sites[s]]<- p1$boot.se
}
View(poolsites)
#get extrapolated species richness by site dependent on sampling length
#30 days
dHbySite$JDAY <- lubridate::yday(dHbySite$Date)
compar_fh<- poolsites #fh will be full hours
fh1 <- matrix(0,nrow=length(Sites),ncol=100)
rownames(fh1) <- Sites
this.days <- 30
file =1
for(file in 1:length(Sites)){
thisfile <- Sites[file]
sub <- subset(dHbySite,Site==thisfile) ##choose file we are on now
nBoot <- 100
b=1
for (b in 1:nBoot){
if(nrow(sub)>0){
alldays <- sort(unique(sub$JDAY))
if(length(alldays)>1){
days <- sample(alldays,min(length(alldays),this.days),replace = T)
}else{
days <- rep(alldays,times=this.days)
}
sub2 <- subset(sub,JDAY%in%days)
sub4<- subset(sub2, select = species)
p1<-specpool(sub4, smallsample = TRUE)
fh1[rownames(fh1) == thisfile,b]<- p1$boot
}else{
fh1[rownames(fh1) == thisfile,b]<- NA
}
}
}
compar_fh$fh1<- rowMeans(fh1)
compar_fh$fh1.se <- apply(fh1, 1, function(x) sd(x) / sqrt(length(x)))
View(compar_fh)
View(compar_fh)
View(p1)
View(sub)
View(sub1)
table(rowSums(sub1))
#60 days
fh2 <- matrix(0,nrow=length(Sites),ncol=100)
rownames(fh2) <- Sites
this.days <- 60
file =1
for(file in 1:length(Sites)){
thisfile <- Sites[file]
sub <- subset(dHbySite,Site==thisfile) ##choose file we are on now
nBoot <- 100
b=1
for (b in 1:nBoot){
if(nrow(sub)>0){
alldays <- sort(unique(sub$JDAY))
if(length(alldays)>1){
days <- sample(alldays,min(length(alldays),this.days),replace = T)
}else{
days <- rep(alldays,times=this.days)
}
sub2 <- subset(sub,JDAY%in%days)
sub4<- subset(sub2, select = species)
p1<-specpool(sub4, smallsample = TRUE)
fh1[rownames(fh1) == thisfile,b]<- p1$boot
}else{
fh1[rownames(fh1) == thisfile,b]<- NA
}
}
}
compar_fh$fh2<- rowMeans(fh2)
compar_fh$fh2.se <- apply(fh2, 1, function(x) sd(x) / sqrt(length(x)))
View(compar_fh)
View(dHbySite)
this.days <- 30
file =1
for(file in 1:length(Sites)){
thisfile <- Sites[file]
sub <- subset(dHbySite,Site==thisfile) ##choose file we are on now
nBoot <- 100
b=1
for (b in 1:nBoot){
if(nrow(sub)>0){
alldays <- sort(unique(sub$JDAY))
if(length(alldays)>1){
days <- sample(alldays,min(length(alldays),this.days),replace = T)
}else{
days <- rep(alldays,times=this.days)
}
sub2 <- subset(sub,JDAY%in%days)
sub4<- subset(sub2, select = species)
p1<-specpool(sub4, smallsample = TRUE)
fh1[rownames(fh1) == thisfile,b]<- p1$boot
}else{
fh1[rownames(fh1) == thisfile,b]<- NA
}
}
}
compar_fh$fh1<- rowMeans(fh1)
compar_fh$fh1.se <- apply(fh1, 1, function(x) sd(x) / sqrt(length(x)))
#60 days
fh2 <- matrix(0,nrow=length(Sites),ncol=100)
rownames(fh2) <- Sites
this.days <- 60
file =1
for(file in 1:length(Sites)){
thisfile <- Sites[file]
sub <- subset(dHbySite,Site==thisfile) ##choose file we are on now
nBoot <- 100
b=1
for (b in 1:nBoot){
if(nrow(sub)>0){
alldays <- sort(unique(sub$JDAY))
if(length(alldays)>1){
days <- sample(alldays,min(length(alldays),this.days),replace = T)
}else{
days <- rep(alldays,times=this.days)
}
sub2 <- subset(sub,JDAY%in%days)
sub4<- subset(sub2, select = species)
p1<-specpool(sub4, smallsample = TRUE)
fh2[rownames(fh2) == thisfile,b]<- p1$boot
}else{
fh2[rownames(fh2) == thisfile,b]<- NA
}
}
}
compar_fh$fh2<- rowMeans(fh2)
compar_fh$fh2.se <- apply(fh2, 1, function(x) sd(x) / sqrt(length(x)))
View(compar_fh)
#90 days
fh3 <- matrix(0,nrow=length(Sites),ncol=100)
rownames(fh3) <- Sites
this.days <- 90
file =1
for(file in 1:length(Sites)){
thisfile <- Sites[file]
sub <- subset(dHbySite,Site==thisfile) ##choose file we are on now
nBoot <- 100
b=1
for (b in 1:nBoot){
if(nrow(sub)>0){
alldays <- sort(unique(sub$JDAY))
if(length(alldays)>1){
days <- sample(alldays,min(length(alldays),this.days),replace = T)
}else{
days <- rep(alldays,times=this.days)
}
sub2 <- subset(sub,JDAY%in%days)
sub4<- subset(sub2, select = species)
p1<-specpool(sub4, smallsample = TRUE)
fh3[rownames(fh3) == thisfile,b]<- p1$boot
}else{
fh3[rownames(fh3) == thisfile,b]<- NA
}
}
}
compar_fh$fh3<- rowMeans(fh3)
compar_fh$fh3.se <- apply(fh3, 1, function(x) sd(x) / sqrt(length(x)))
DVS <- Cam4[Cam4$Spring == "DVS",]
DVSte <- as.data.frame(colSums(CamOpList[["DVS"]], na.rm = T))
colnames(DVSte)[1] <- "DailyEffort"
DVSte$Date <- as.Date(rownames(DVSte), format = "%Y-%m-%d")
DVSte$CumSum <- cumsum(DVSte$DailyEffort)
DVS <- left_join(DVS, DVSte, by="Date")
DVS <- DVS[order(DVS$Date),]
DVS <- DVS%>%ungroup()%>%mutate(Unq = cumsum(!duplicated(species)))
DVSUnq <- DVS%>%group_by(Date)%>%slice_max(Unq)%>%ungroup()
DVSUnq2 <- DVSUnq%>%distinct(Unq, .keep_all = T)
View(DVSUnq2)
View(DVSUnq)
View(DVSte)
View(dHbySite)
View(CamOpList)
CamOpList[["DVS"]]
View(dHList)
TE <- data.frame(DailyEffort=numeric(), Date=date(), CumSum=numeric())
TE <- data.frame(DailyEffort=numeric(), Date=as.date(), CumSum=numeric())
TE <- data.frame(DailyEffort=numeric(), Date=as.Date(), CumSum=numeric())
TE <- data.frame(DailyEffort=numeric(), Date=character(), CumSum=numeric())
for (s in 1:length(Springs)) {
#DVS <- dHbySite[dHbySite$Site == Springs[i],]
DVSte <- as.data.frame(colSums(CamOpList[[Springs[i]]], na.rm = T))
colnames(DVSte)[1] <- "DailyEffort"
DVSte$Date <- as.Date(rownames(DVSte), format = "%Y-%m-%d")
DVSte$CumSum <- cumsum(DVSte$DailyEffort)
}
View(CamOpList)
nrow(CamOpList[["BBS/UC"]])
as.data.frame(CamOpList[["BBS/UC"]])
TE <- data.frame(DailyEffort=numeric(), Date=character(), CumSum=numeric(), Spring=character())
for (s in 1:length(Springs)) {
#DVS <- dHbySite[dHbySite$Site == Springs[i],]
if(nrow(CamOpList[[Springs[s]]]) == 1){
DVSte <- as.data.frame(CamOpList[[Springs[s]]])
colnames(DVSte)[1] <- "DailyEffort"
DVSte$Date <- as.Date(rownames(DVSte), format = "%Y-%m-%d")
DVSte$CumSum <- cumsum(DVSte$DailyEffort)
DVSte$Spring <- Springs[s]
}else{
DVSte <- as.data.frame(colSums(CamOpList[[Springs[s]]], na.rm = T))
colnames(DVSte)[1] <- "DailyEffort"
DVSte$Date <- as.Date(rownames(DVSte), format = "%Y-%m-%d")
DVSte$CumSum <- cumsum(DVSte$DailyEffort)
DVSte$Spring <- Springs[s]
}
TE <- rbind(TE, DVSte)
}
dim(as.data.frame(CamOpList[["BBS/UC"]]))
DVSte <- as.data.frame(CamOpList[[Springs[5]]])
colnames(DVSte)[1] <- "DailyEffort"
DVSte$Date <- as.Date(rownames(DVSte), format = "%Y-%m-%d")
DVSte$CumSum <- cumsum(DVSte$DailyEffort)
DVSte$Spring <- Springs[s]
View(DVSte)
DVSte <- as.data.frame(colSums(CamOpList[[Springs[1]]], na.rm = T))
View(DVSte)
DVSte <- t(as.data.frame(CamOpList[[Springs[5]]]))
DVSte <- as.data.frame(t(CamOpList[[Springs[5]]]))
View(DVSte)
TE <- data.frame(DailyEffort=numeric(), Date=character(), CumSum=numeric(), Spring=character())
for (s in 1:length(Springs)) {
#DVS <- dHbySite[dHbySite$Site == Springs[i],]
if(nrow(CamOpList[[Springs[s]]]) == 1){
DVSte <- as.data.frame(t(CamOpList[[Springs[s]]]))
colnames(DVSte)[1] <- "DailyEffort"
DVSte$Date <- as.Date(rownames(DVSte), format = "%Y-%m-%d")
DVSte$CumSum <- cumsum(DVSte$DailyEffort)
DVSte$Spring <- Springs[s]
}else{
DVSte <- as.data.frame(colSums(CamOpList[[Springs[s]]], na.rm = T))
colnames(DVSte)[1] <- "DailyEffort"
DVSte$Date <- as.Date(rownames(DVSte), format = "%Y-%m-%d")
DVSte$CumSum <- cumsum(DVSte$DailyEffort)
DVSte$Spring <- Springs[s]
}
TE <- rbind(TE, DVSte)
}
View(TE)
View(StationInfoSite)
View(StationInfo)
View(dHbySite)
View(StationInfoSite)
dHList <- list()
for (s in 1:length(Sites)){
Cam5 <- Cam4[Cam4$Spring == Sites[s],]
dH <- data.frame(Date=seq.Date(from=StationInfoSite[StationInfoSite == Sites[s]]$min,
to=StationInfoSite[StationInfoSite == Sites[s]]$max, by=1))
for (i in 1:length (species)){
CamSub <- Cam5[Cam5$species == species[i],]
x <- sapply(dH$Date, function (x) ifelse(x %in% CamSub$Date, 1,0)) #replace 1 with length(CamSub$Date[CamSub$Date == x]) to get incidence at individual cameras
y <- sapply(dH$Date, function (Date) ifelse(Date %in% CamSub$Date, paste(paste(CamSub[CamSub$Date == Date,]$Spring, CamSub[CamSub$Date == Date,]$Line), collapse=", "),NA))
dH[ ,ncol(dH)+1] <- x                # Append new column
colnames(dH)[ncol(dH)] <- species[i] # Rename column name
dH[ ,ncol(dH)+1] <- y
colnames(dH)[ncol(dH)] <- colnames(dH)[ncol(dH)] <- paste(species[i], "SpringLine")
}
dHList[[Sites[s]]] <- dH
}
View(StationInfo)
str(StationInfoSite)
dHList <- list()
for (s in 1:length(Sites)){
Cam5 <- Cam4[Cam4$Spring == Sites[s],]
x <- StationInfoSite[StationInfoSite$Spring == Sites[s]]
dH <- data.frame(Date=seq.Date(from=x$min,
to=x$max, by=1))
for (i in 1:length (species)){
CamSub <- Cam5[Cam5$species == species[i],]
x <- sapply(dH$Date, function (x) ifelse(x %in% CamSub$Date, 1,0)) #replace 1 with length(CamSub$Date[CamSub$Date == x]) to get incidence at individual cameras
y <- sapply(dH$Date, function (Date) ifelse(Date %in% CamSub$Date, paste(paste(CamSub[CamSub$Date == Date,]$Spring, CamSub[CamSub$Date == Date,]$Line), collapse=", "),NA))
dH[ ,ncol(dH)+1] <- x                # Append new column
colnames(dH)[ncol(dH)] <- species[i] # Rename column name
dH[ ,ncol(dH)+1] <- y
colnames(dH)[ncol(dH)] <- colnames(dH)[ncol(dH)] <- paste(species[i], "SpringLine")
}
dHList[[Sites[s]]] <- dH
}
for (s in 1:length(Sites)){
Cam5 <- Cam4[Cam4$Spring == Sites[s],]
x <- StationInfoSite[StationInfoSite$Spring == Sites[s],]
dH <- data.frame(Date=seq.Date(from=x$min,
to=x$max, by=1))
for (i in 1:length (species)){
CamSub <- Cam5[Cam5$species == species[i],]
x <- sapply(dH$Date, function (x) ifelse(x %in% CamSub$Date, 1,0)) #replace 1 with length(CamSub$Date[CamSub$Date == x]) to get incidence at individual cameras
y <- sapply(dH$Date, function (Date) ifelse(Date %in% CamSub$Date, paste(paste(CamSub[CamSub$Date == Date,]$Spring, CamSub[CamSub$Date == Date,]$Line), collapse=", "),NA))
dH[ ,ncol(dH)+1] <- x                # Append new column
colnames(dH)[ncol(dH)] <- species[i] # Rename column name
dH[ ,ncol(dH)+1] <- y
colnames(dH)[ncol(dH)] <- colnames(dH)[ncol(dH)] <- paste(species[i], "SpringLine")
}
dHList[[Sites[s]]] <- dH
}
dHbySite <- rbindlist(dHList, idcol="Site")
TE%>%group_by(Spring)%>%summarise(rows=nrow())
table(TE$Spring)
table(dHbySite$Site)
View(dHList)
TE2 <- left_join(dhbySite, TE, by=Site, Date)
TE2 <- left_join(dHbySite, TE, by=Site, Date)
TE2 <- left_join(dHbySite, TE, by="Site", "Date")
View(TE)
colnames(TE)[4] <- "Site"
TE2 <- left_join(dHbySite, TE, by="Site", "Date")
View(TE2)
table(is.na(TE2$CumSum))
table(Cam4$Spring)
View(CamOpList)
View(StationInfo4)
View(StationInfoSite)
table(TE$Site)
table(dHbySite$Site)
View(StationInfo4)
View(StationInfoSite)
StationInfoSite <- Cam[Cam$First.Photo.Date > "2022-01-01" & Cam$What.is.date.of.last.photo. > "2022-01-01",] %>% group_by(Spring) %>% summarise(min=min(First.Photo.Date),max=max(What.is.date.of.last.photo.))
str(Cam)
View(Cam)
#bring in camera data transcribed from word doc
Cam <- read.csv("C:/Users/eliwi/OneDrive/Documents/UNR/CamData2022.csv", na.strings = c("", "N/A"))
Cam$First.Photo.Date <- as.Date(Cam$First.Photo.Date, format = "%m/%d/%y")
Cam$What.is.date.of.last.photo. <- as.Date(Cam$What.is.date.of.last.photo., format = "%m/%d/%y")
#make rows for detection dates of each species
Cam2 <- Cam%>%pivot_longer(cols = 14:38,
names_to = "species",
values_to = "Detection.Dates")
#remove dates where nothing was detected
Cam3 <- Cam2[!is.na(Cam2$Detection.Dates),]
str(Cam3)
#separate detection dates into individual rows for each detection
Cam4 <- separate_rows(Cam3, Detection.Dates, sep=",")
Cam4 <- Cam4%>% mutate(Taxa=case_when(species %in% mammals  ~ "Mammals",
species %in% birds ~ "Birds",
species == "unID.Herp" ~ "Herps"
))
#clean up date column for key
Cam4$Date <- as.Date(Cam4$Detection.Dates, format= "%m/%d/%y")
#CI Station Info similar to data(camtraps), input for summaries in CamTrapR
#get camera station info for trap effort
StationInfo <- Cam[Cam$First.Photo.Date > "2022-01-01" & Cam$What.is.date.of.last.photo. > "2022-01-01",] %>% summarise(min=min(First.Photo.Date),max=max(What.is.date.of.last.photo.))
StationInfo2 <- Cam[Cam$First.Photo.Date > "2022-01-01" & Cam$What.is.date.of.last.photo. > "2022-01-01",] %>% group_by(CamID) %>% summarise(min=min(First.Photo.Date),max=max(What.is.date.of.last.photo.))
StationInfoSite <- Cam[Cam$First.Photo.Date > "2022-01-01" & Cam$What.is.date.of.last.photo. > "2022-01-01",] %>% group_by(Spring) %>% summarise(min=min(First.Photo.Date),max=max(What.is.date.of.last.photo.))
StationInfo3 <- distinct(Cam4[,c(1,2,4,6)], CamID, .keep_all = T)
StationInfo4 <- left_join(StationInfo2, StationInfo3, by='CamID')
camOps <- cameraOperation(CTtable = StationInfo4,
stationCol = 'CamID',
setupCol = 'min',
retrievalCol = 'max'
) # can include argument hasProblems=T for periods where camera was out of order
CamOpList <- list()
for(i in 1:length(Springs)){
camOp <- cameraOperation(CTtable = StationInfo4[StationInfo4$Spring == Springs[i],],
stationCol = 'CamID',
setupCol = 'min',
retrievalCol = 'max'
)
CamOpList[[Springs[i]]] <- camOp
}
dH <- data.frame(Date=seq.Date(from=StationInfo$min, to=StationInfo$max, by=1))
#we can modify this to get specific springs to test species curves by number of days
for (i in 1:length(species)){
CamSub <- Cam4[Cam4$species == species[i],]
x <- sapply(dH$Date, function (x) ifelse(x %in% CamSub$Date, 1,0)) #replace 1 with length(CamSub$Date[CamSub$Date == x]) to get incidence at individual cameras
y <- sapply(dH$Date, function (Date) ifelse(Date %in% CamSub$Date, paste(paste(CamSub[CamSub$Date == Date,]$Spring, CamSub[CamSub$Date == Date,]$Line), collapse=", "),NA))
dH[ ,ncol(dH)+1] <- x                # Append new column
colnames(dH)[ncol(dH)] <- species[i] # Rename column name
dH[ ,ncol(dH)+1] <- y
colnames(dH)[ncol(dH)] <- colnames(dH)[ncol(dH)] <- paste(species[i], "SpringLine")
}
# setup and retrieval days default to 0.5 day effort from cameraOperation function
dH$TrapEffort <- sapply(dH$Date, function (x) sum(camOps[,as.character(x)], na.rm = T))
dHList <- list()
for (s in 1:length(Sites)){
Cam5 <- Cam4[Cam4$Spring == Sites[s],]
x <- StationInfoSite[StationInfoSite$Spring == Sites[s],]
dH <- data.frame(Date=seq.Date(from=x$min,
to=x$max, by=1))
for (i in 1:length (species)){
CamSub <- Cam5[Cam5$species == species[i],]
x <- sapply(dH$Date, function (x) ifelse(x %in% CamSub$Date, 1,0)) #replace 1 with length(CamSub$Date[CamSub$Date == x]) to get incidence at individual cameras
y <- sapply(dH$Date, function (Date) ifelse(Date %in% CamSub$Date, paste(paste(CamSub[CamSub$Date == Date,]$Spring, CamSub[CamSub$Date == Date,]$Line), collapse=", "),NA))
dH[ ,ncol(dH)+1] <- x                # Append new column
colnames(dH)[ncol(dH)] <- species[i] # Rename column name
dH[ ,ncol(dH)+1] <- y
colnames(dH)[ncol(dH)] <- colnames(dH)[ncol(dH)] <- paste(species[i], "SpringLine")
}
dHList[[Sites[s]]] <- dH
}
dHbySite <- rbindlist(dHList, idcol="Site")
TE <- data.frame(DailyEffort=numeric(), Date=character(), CumSum=numeric(), Spring=character())
for (s in 1:length(Springs)) {
#DVS <- dHbySite[dHbySite$Site == Springs[i],]
if(nrow(CamOpList[[Springs[s]]]) == 1){
DVSte <- as.data.frame(t(CamOpList[[Springs[s]]]))
colnames(DVSte)[1] <- "DailyEffort"
DVSte$Date <- as.Date(rownames(DVSte), format = "%Y-%m-%d")
DVSte$CumSum <- cumsum(DVSte$DailyEffort)
DVSte$Spring <- Springs[s]
}else{
DVSte <- as.data.frame(colSums(CamOpList[[Springs[s]]], na.rm = T))
colnames(DVSte)[1] <- "DailyEffort"
DVSte$Date <- as.Date(rownames(DVSte), format = "%Y-%m-%d")
DVSte$CumSum <- cumsum(DVSte$DailyEffort)
DVSte$Spring <- Springs[s]
}
TE <- rbind(TE, DVSte)
}
#camOp list based off of deployment dates of cameras which feeds into TE, whereas
#dHbySite based off of station info site, dates of cameras at site level
table(TE$Spring)
table(dHbySite$Site)
View(StationInfoSite)
#bring in camera data transcribed from word doc
Cam <- read.csv("C:/Users/eliwi/OneDrive/Documents/UNR/CamData2022.csv", na.strings = c("", "N/A"))
Cam$First.Photo.Date <- as.Date(Cam$First.Photo.Date, format = "%m/%d/%y")
Cam$What.is.date.of.last.photo. <- as.Date(Cam$What.is.date.of.last.photo., format = "%m/%d/%y")
#make rows for detection dates of each species
Cam2 <- Cam%>%pivot_longer(cols = 14:38,
names_to = "species",
values_to = "Detection.Dates")
#remove dates where nothing was detected
Cam3 <- Cam2[!is.na(Cam2$Detection.Dates),]
#separate detection dates into individual rows for each detection
Cam4 <- separate_rows(Cam3, Detection.Dates, sep=",")
Cam4 <- Cam4%>% mutate(Taxa=case_when(species %in% mammals  ~ "Mammals",
species %in% birds ~ "Birds",
species == "unID.Herp" ~ "Herps"
))
#clean up date column for key
Cam4$Date <- as.Date(Cam4$Detection.Dates, format= "%m/%d/%y")
#CI Station Info similar to data(camtraps), input for summaries in CamTrapR
#get camera station info for trap effort
StationInfo <- Cam[Cam$First.Photo.Date > "2022-01-01" & Cam$What.is.date.of.last.photo. > "2022-01-01",] %>% summarise(min=min(First.Photo.Date),max=max(What.is.date.of.last.photo.))
StationInfo2 <- Cam[Cam$First.Photo.Date > "2022-01-01" & Cam$What.is.date.of.last.photo. > "2022-01-01",] %>% group_by(CamID) %>% summarise(min=min(First.Photo.Date),max=max(What.is.date.of.last.photo.))
StationInfoSite <- Cam[Cam$First.Photo.Date > "2022-01-01" & Cam$What.is.date.of.last.photo. > "2022-01-01",] %>% group_by(Spring) %>% summarise(min=min(First.Photo.Date),max=max(What.is.date.of.last.photo.))
StationInfo3 <- distinct(Cam4[,c(1,2,4,6)], CamID, .keep_all = T)
StationInfo4 <- left_join(StationInfo2, StationInfo3, by='CamID')
camOps <- cameraOperation(CTtable = StationInfo4,
stationCol = 'CamID',
setupCol = 'min',
retrievalCol = 'max'
) # can include argument hasProblems=T for periods where camera was out of order
CamOpList <- list()
for(i in 1:length(Springs)){
camOp <- cameraOperation(CTtable = StationInfo4[StationInfo4$Spring == Springs[i],],
stationCol = 'CamID',
setupCol = 'min',
retrievalCol = 'max'
)
CamOpList[[Springs[i]]] <- camOp
}
View(Cam)
#camOps effort by Spring
Springs <- unique(Cam4$Spring)
CamOpList <- list()
for(i in 1:length(Springs)){
camOp <- cameraOperation(CTtable = StationInfo4[StationInfo4$Spring == Springs[i],],
stationCol = 'CamID',
setupCol = 'min',
retrievalCol = 'max'
)
CamOpList[[Springs[i]]] <- camOp
}
